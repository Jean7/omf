
#javascript_include_tag "jquery"
#javascript_include_tag "jquery.periodicalupdater"
#javascript_include_tag 'jquery-ui-1.8.4.custom.min'
#javascript_include_file 'http://maps.google.com/maps/api/js?sensor=false'

#javascript_include_tag "protovis-d3.2"
stylesheet_link_tag 'table'



div.page_header do
	div.page_header_links do
#    link_to 'Edit', {:action => 'edit', :id => @publication}, :class => 'admin'
	end

	h1 "Results"
end

@graphs = graphs
@show_id = show_graph_id
div.page_nav do
  ul do
    @graphs.each_index do |i| 
      @g = @graphs[i]
	    @klass = i == @show_id ? 'selected' : nil
	    li :class => @klass do
  	    a @g[:name], :href => "show?id=#{i}"
    	end
   	end
  end
end


if gd
  div.page do
  
    ###p gd.opts.inspect
    if (prefix = gd.opts[:prefix])
      p prefix
    end
    
    div.graph! do end
    script  :type => 'text/javascript' do |s|
      s << "\nrequire_obj('#{gd.func_name}', {url: '#{gd.js_uri}'}, function() {"
      s << gd.build_js('graph')

      if @updateInterval = gd.opts[:updateEvery]
	text %{
	  require_obj('$.PeriodicalUpdater', {url: ['jquery', 'jquery.periodicalupdater']}, function() { 
	    $.PeriodicalUpdater('update?id=#{@show_id}&sid=#{@session_id}', {
		method: 'get',          // method; get or post
		  data: '',                   // array of values to be passed to the page - e.g. {name: "John", greeting: "hello"}
		  minTimeout: #{@updateInterval * 1000},       // starting value for the timeout in milliseconds
		  maxTimeout: #{4 * @updateInterval * 1000},       // maximum length of time between requests
		  multiplier: 2,          // if set to 2, timerInterval will double each time the response hasn't changed (up to maxTimeout)
		  type: 'json',           // response type - text, xml, json, etc.  See $.ajax config options
		  maxCalls: 0,            // maximum number of calls. 0 = no limit.
		  autoStop: 0             // automatically stop requests after this many returns of the same data. 0 = disabled.
	    }, function(reply) {
		  var data = reply['data'];
		  var opts = reply['opts'];
		  #{gd.js_var_name()}.update(data);
	    });
	  });
	}
	s << '});'  # require

      end
    end
    
    if (postfix = gd.opts[:postfix])
      p postfix
    end
  
  end
  
end # if gd


