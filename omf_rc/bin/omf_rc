#!/usr/bin/env ruby

require "optparse"
require 'omf_rc'
require 'omf_rc/resource_factory'
$stdout.sync = true

options = {
  uid: `hostname`.chomp
}

executable_name = File.basename($PROGRAM_NAME)

option_parser = OptionParser.new do |opts|
  opts.banner = "usage: #{executable_name} [options]"

  opts.on("-u USER", "Username") do |user|
    options[:user] = user
  end

  opts.on("-p PASSWORD", "Password") do |password|
    options[:password] = password
  end

  opts.on("-s SERVER", "XMPP server") do |server|
    options[:server] = server
  end

  opts.on("-t TOPIC", "PubSub topic to create, also becomes the uid of the resource, default to hostname") do |topic|
    options[:uid] = topic
  end

  opts.on("-d", "--debug", "Debug mode") do
    options[:debug] = true
  end

  opts.on("--oml-uri URI", "URI of server to send measurements to (tcp:host:port)") do |uri|
    options[:oml_uri] = uri
  end
  opts.on("--oml-exp-id NAME", "Name for the experiment DB") do |id|
    options[:oml_exp_id] = id
  end
  opts.on("--oml-id NAME", "Name to identify this OML client instance (optional, default: uid/hrn)") do |id|
    options[:oml_id] = id
  end
  opts.on("--oml-app NAME", "Name to identiy this application for OML (optional, default: uid/hrn)") do |id|
    options[:oml_app] = id
  end
end

begin
  option_parser.parse!
rescue => e
  puts e.message
  puts ""
  puts option_parser.help
  exit(1)
end

unless options[:server] && options[:user] && options[:server]
  puts option_parser.help
  exit(1)
end

Logging.logger.root.level = :debug if options[:debug]
Blather.logger = logger

OmfRc::ResourceFactory.load_default_resource_proxies

EM.run do
  node = OmfRc::ResourceFactory.new(:node, options)
  node.connect

  trap(:INT) { node.disconnect }
  trap(:TERM) { node.disconnect }
end
