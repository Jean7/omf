#!/usr/bin/env ruby

require "optparse"
require 'omf_rc'
require 'omf_rc/resource_factory'
$stdout.sync = true

options = {
  uid: `hostname`.chomp
}

executable_name = File.basename($PROGRAM_NAME)
oml_enabled = false

begin
  oml_enabled = OML4R::init(ARGV, :appName => executable_name) do |opts|
    opts.banner = "usage: #{executable_name} [options]"

    opts.on("-u USER", "Username") do |user|
      options[:user] = user
    end

    opts.on("-p PASSWORD", "Password") do |password|
      options[:password] = password
    end

    opts.on("-s SERVER", "PubSub server") do |server|
      options[:server] = server
    end

    opts.on("-t TOPIC", "PubSub topic to create, also becomes the uid of the resource, default to hostname") do |topic|
      options[:uid] = topic
    end

    opts.on("-d", "--debug", "Debug mode") do
      options[:debug] = true
    end
  end
rescue => e
  # right now OML4R does not raise proper exceptions :(
  # OML4R requires --oml-noop to be set if we want to run without doing any
  # measurements... this is too restrictive here, we want to run without OML
  # if no OML parameters were set and this even if --oml-noop is not set. 
  if e.message.include?('OML4R: Missing values for parameters :expID ')
    puts e.message
    puts "Keep running but without OML4R... (maybe you should set --oml-noop)"
  else
    puts e.message
    exit(1)
  end
end

OmfCommon::Measure.enable if oml_enabled

unless options[:server] && options[:user] && options[:password]
  puts "Missing parameters to connect to a PubSub Server (run with --help)"
  exit(1)
end

Logging.logger.root.level = :debug if options[:debug]
Blather.logger = logger

OmfRc::ResourceFactory.load_default_resource_proxies

EM.run do
  node = OmfRc::ResourceFactory.new(:node, options)
  node.connect

  trap(:INT) { node.disconnect }
  trap(:TERM) { node.disconnect }
end
