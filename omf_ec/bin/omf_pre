#!/usr/bin/env ruby
#
require 'gli'
require 'omf_ec'
$stdout.sync = true

include GLI::App
include OmfEc

program_desc "Run a command on the testbed(s)"
version OmfEc::VERSION
desc "Debug mode (printing debug logging messages)"
switch [:d, :debug]

desc "Debug XMPP traffic mode (include XMPP debug logging messages under debug mode)."
switch [:x, :xmpp]


desc "XMPP user name"
arg_name "USER"
flag [:u, :user]

desc "XMPP user password"
arg_name "PASSWORD"
flag [:p, :password]

desc "XMPP server domain"
arg_name "DOMAIN"
flag [:server]

config_file(".config/omf_ec.yml")

desc "Execute an experiment script"
arg_name 'path_to_script_file'
command :exec do |c|
  c.desc "Experiment name"
  c.arg_name "EXP_NAME"
  c.flag [:e, :experiment]

  c.desc "Check script version (you need to define OMF_VERSIONS in your script"
  c.switch [:k, :check]

  c.action do |global_options, options, args|
    if global_options[:xmpp]
      Blather.logger = logger
    end

    if global_options[:debug]
      Logging.logger.root.level = :debug
    end
    unless global_options[:user] && global_options[:password] && global_options[:server]
      help_now! "Incomplete options"
    end

    # Check version
    if options[:check]
      File.open(args[0], 'r') do |f|
        f.read.chomp.match(/OMF_VERSIONS\W*=\W*(.*)/)
        versions = $1
        unless versions && versions.split(',').include?(OmfCommon::PROTOCOL_VERSION)
          raise StandardError, "Could not find compatibile protocol version number in your script"
        end
      end
    end

    begin
      include OmfEc::DSL

      comm.when_ready do
        logger.info "Connected: #{comm.jid.inspect}"
        exp.name = options[:experiment] if options[:experiment]
        logger.info "Start experiment: #{exp.id}"
        begin
          load args[0]
        rescue => e
          logger.error e.message
          logger.error e.backtrace.join("\n")
        end
      end

      EM.run do
        comm.connect(global_options[:user], global_options[:password], global_options[:server])
        trap(:INT) { Experiment.done }
        trap(:TERM) { Experiment.done }
      end
    rescue => e
      logger.fatal e.message
      logger.fatal e.backtrace.join("\n")
    end
  end
end

on_error do |exception|
  true
end

exit run(ARGV)
