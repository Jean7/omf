#!/usr/bin/env ruby
#
require 'gli'
require 'omf_ec'
require 'omf_common'
$stdout.sync = true

include GLI::App
include OmfCommon

program_desc "Run a command on the testbed(s)"

version OmfEc::VERSION
desc "Debug mode (printing debug logging messages)"
switch [:d, :debug]

desc "Execute an experiment script"
arg_name 'path_to_script_file'
command :exec do |c|
  c.config_file(".config/omf/ec.yml")

  c.desc "XMPP user name"
  c.arg_name "USER"
  c.flag [:u, :user]

  c.desc "XMPP user password"
  c.arg_name "PASSWORD"
  c.flag [:p, :password]

  c.desc "XMPP server domain"
  c.arg_name "DOMAIN"
  c.flag [:server]

  c.desc "Check script version (you need to define OMF_VERSIONS in your script"
  c.switch [:k, :check]

  c.action do |global_options,options,args|
    if global_options[:debug]
      Logging.logger.root.level = :debug
      Blather.logger = logger
    end
    unless options[:user] && options[:password] && options[:server]
      help_now! "Incomplete options"
    end
    @opts = options
    @comm = Comm.new(:xmpp)

    # Check version
    if options[:check]
      File.open(args[0], 'r') do |f|
        f.read.chomp.match(/OMF_VERSIONS\W*=\W*(.*)/)
        versions = $1
        unless versions && versions.split(',').include?(PROTOCOL_VERSION)
          raise StandardError, "Could not find compatibile protocol version number in your script"
        end
      end
    end

    begin
      include OmfEc::DSL
      load args[0], true
    rescue => e
      logger.fatal e.message
      logger.fatal e.backtrace.join("\n")
    end

    EM.run do
      @comm.connect(@opts[:user], @opts[:password], @opts[:server])
      trap(:INT) { @comm.disconnect }
      trap(:TERM) { @comm.disconnect }
    end
  end
end

on_error do |exception|
  true
end

exit run(ARGV)
