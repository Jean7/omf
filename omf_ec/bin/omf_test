#!/usr/bin/env ruby

require "optparse"
require 'omf_common'
$stdout.sync = true

options = {
  dsl: 'xmpp',
  pubsub_host: 'pubsub',
}

executable_name = File.basename($PROGRAM_NAME)

option_parser = OptionParser.new do |opts|
  opts.banner = "usage: #{executable_name} [options]"

  opts.on("-u USER", "Username") do |user|
    options[:user] = user
  end

  opts.on("-p PASSWORD", "Password") do |password|
    options[:password] = password
  end

  opts.on("-s SERVER", "XMPP server") do |server|
    options[:server] = server
  end

  opts.on("-n NODE", "PubSub node to subscribe") do |node|
    options[:uid] = node
  end

  opts.on("-d", "--debug", "Debug mode") do
    options[:debug] = true
  end
end

begin
  option_parser.parse!
rescue => e
  puts e.message
  puts ""
  puts option_parser.help
  exit(1)
end

unless options[:server] && options[:user] && options[:server]
  puts option_parser.help
  exit(1)
end

Logging.logger.root.level = :debug if options[:debug]
Blather.logger = logger

comm = OmfCommon::Comm.new(options[:dsl])
host = nil

# Create a resource of type mock
create_msg = OmfCommon::Message.create { |v| v.property('type', 'mock') }

create_wifi_msg = OmfCommon::Message.create do |v|
  v.property('hrn', 'wlan0')
  v.property('type', 'wifi')
end

# A request message to be sent to mock
request_mock_property = OmfCommon::Message.request do |v|
  v.property('available_properties')
  v.property('kernel_version')
  v.property('resource_proxy_list')
  v.property('resource_utility_list')
  v.property('bob')
end

request_wifi_property = OmfCommon::Message.request do |v|
  v.property('link')
  v.property('available_properties')
end

# A request message to be sent to node
request_node_property = OmfCommon::Message.request do |v|
  v.property('available_properties')
  v.property('proxies')
end

# A configure message to be sent to mock
configure_mock_property = OmfCommon::Message.configure do |v|
  v.property('hrn', 'human_readable_name')
end

# Simple release message
release_message = OmfCommon::Message.release

# For simplicity, use comm instance directly
comm.when_ready do
  logger.info "CONNECTED: #{comm.jid.inspect}"
  host = "#{options[:pubsub_host]}.#{comm.jid.domain}"

  # We assume the node where RC runs started already
  comm.subscribe(options[:uid], host) do |e|
    if e.error?
      comm.disconnect(host)
    else
      # Publish the create message to RC's pubsub topic
      comm.publish(options[:uid], request_node_property, host)
      comm.publish(options[:uid], create_wifi_msg, host)
    end
  end
end

# Fired when messages published to the nodes I subscribed to
comm.node_event do |e|
  e.items.each do |item|
    begin
      # Parse the message (pubsub item payload)
      message = OmfCommon::Message.parse(item.payload)
      context_id = message.read_content("context_id")

      # We are only interested in inform messages for the moment
      if message.operation == :inform
        inform_type = message.read_content("inform_type")

        case inform_type
        when 'CREATED'
          resource_id = message.read_content("resource_id")
          logger.info "Resource #{resource_id} created"

          comm.subscribe(resource_id, host) do |m|
            EM.add_periodic_timer(2) do
              comm.publish(resource_id, request_wifi_property, host)
              #comm.publish(resource_id, request_mock_property, host)
              #comm.publish(resource_id, configure_mock_property, host)
            end
          end

        when 'STATUS'
          message.read_element("//property").each do |p|
            logger.info "#{p.attr('key')} => #{p.content.strip}"
          end
        when 'RELEASED'
          logger.info "Resource #{message.read_content("resource_id")} released"
        when 'FAILED'
          logger.error message.read_content("error_message")
        end
      end
    rescue => e
      logger.error "#{e.message}\n#{e.backtrace.join("\n")}"
    end
  end
end

trap(:INT) { comm.disconnect(host) }
trap(:TERM) { comm.disconnect(host) }

EM.run do
  comm.connect(options[:user], options[:password], options[:server])

  EM.add_timer(5) do
    comm.publish(options[:uid], release_message, host)
  end
end
