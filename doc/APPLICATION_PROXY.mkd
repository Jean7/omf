# How to use the Application Proxy

## Before we could start

Read the {file:doc/DEVELOPERS.mkd Resource Proxy tutorial}, and set up a testing environment as explained in the first section of that previous tutorial.

## Objectives

OMF6 comes with some bundled Resource Proxies, one of them is the Application Proxy. This proxy allows you to interact with an application X which you have specifically defined. For example, through this proxy you can declare the parameters that the application X supports, you can configure the values of this parameters, you can start/pause/stop application X, you can request its installation, etc...

This tutorial provides a simple example on how to use this Application Proxy to interact with the ping application, and further describes all the different properties that you can configure for such an Application.

### Files

These are the two files used for this example:

* [Application controller](https://github.com/mytestbed/omf/blob/master/doc/application_controller.rb)
* [Application test controller](https://github.com/mytestbed/omf/blob/master/doc/application_tester.rb)

## Quick Start - simple example

### Resource controller

Firstly, we need a resource controller which will create an instance of an application proxy. In a typical use case, this resource controller may run on a remote machine where you would like to configure and run your application.

This resource controller is essentially similar to the one used in the {file:doc/DEVELOPERS.mkd Resource Proxy tutorial}. It has the following code, which you may save as application\_controller.rb

    #!/usr/bin/env ruby

    require 'omf_rc'
    require 'omf_rc/resource_proxy/application'
    $stdout.sync = true

    OmfCommon.init(:development,
                   communication: { url: 'xmpp://localhost' },
                   logging: { level: { default: 'info' } }) do
      OmfCommon.comm.on_connected do |comm|
        info "Application controller >> Connected to XMPP server as #{comm.conn_info}"
        # Use resource factory method to initialise a new instance of the resource
        app = OmfRc::ResourceFactory.create(:application, uid: 'app_test')
        # Disconnect the resource from Pubsub server, when 'INT' signals received
        comm.on_interrupted { app.disconnect }
      end
    end

Once you run the above controller code, you should see something similar to:

    12:03:20  INFO Object: Application controoler >> Connected to XMPP server as {:proto=>:xmpp, :user=>"interlagos-5059", :domain=>"interlagos"}


### Interacting with the Application Proxy

In a traditional OMF experiment, you would use an Experiment Controller to interact with the Proxies acting on behalf of the resources you would like to use. However in this simple tutorial, we will use a stand-alone tester script to interact with our Application Proxy, this tester script is similar to the Engine test script, which we used to interact with the Garage and Engines proxies in the {file:doc/DEVELOPERS.mkd Resource Proxy tutorial}.

In the following simple tester script, we set the Application Proxy to be the proxy to the ping application, we further define some configurable parameters for ping, then we ask the proxy to start the application, and some time later we ask the proxy to stop it.

You may save the following tester code as application\_tester.rb.

    #!/usr/bin/env ruby

    require 'omf_common'
    $stdout.sync = true

    def run_test(app)
      # Set up inform message handler to print inform messages
      app.on_inform do |m|
        case m.itype
        when 'STATUS'
          if m[:status_type] == 'APP_EVENT'
            info "APP_EVENT #{m[:event]} from app #{m[:app]} - msg: #{m[:msg]}"
          end
        when 'ERROR'
          error m[:reason]
        when 'WARN'
          warn m[:reason]
        end
      end

      # Configure the 'binary_path' and 'parameters' properties of the App Proxy
      app.configure(binary_path: "/bin/ping",
                    parameters: { :target => { :value => 'nicta.com.au' }})

      # Start the application 2 seconds later
      OmfCommon.eventloop.after 2 do
        app.configure(state: :running)
      end

      # Stop the application another 10 seconds later
      OmfCommon.eventloop.after 12 do
        app.configure(state: :stopped)
      end
    end

    OmfCommon.init(:development,
                   communication: { url: 'xmpp://localhost' },
                   logging: { level: { default: 'info' } }) do
      OmfCommon.comm.on_connected do |comm|
        info "Test application >> Connected to XMPP as #{comm.conn_info}"

        # Subscribe to the proxy topic
        comm.subscribe('app_test') do |app|
          if app.error?
            error app.inspect
          else
            # Now subscribed, run the test
            run_test(app)
          end
        end

        comm.on_interrupted { comm.disconnect }
      end
    end

Once you run the above controller code, you should see something similar to:

    13:08:06  INFO Object: APP_EVENT STARTED from app app_test - msg: env -i /bin/ping  nicta.com.au
    13:08:07  INFO Object: APP_EVENT STDOUT from app app_test - msg: PING nicta.com.au (221.199.217.18) 56(84) bytes of data.
    13:08:07  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=1 ttl=63 time=0.911 ms
    13:08:07  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=2 ttl=63 time=1.17 ms
    13:08:08  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=3 ttl=63 time=1.14 ms
    13:08:09  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=4 ttl=63 time=1.13 ms
    13:08:10  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=5 ttl=63 time=1.18 ms
    13:08:11  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=6 ttl=63 time=2.02 ms
    13:08:12  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=7 ttl=63 time=2.14 ms
    13:08:13  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=8 ttl=63 time=2.84 ms
    13:08:14  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=9 ttl=63 time=2.21 ms
    13:08:15  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=10 ttl=63 time=2.13 ms
    13:08:25  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=11 ttl=63 time=1.08 ms
    13:08:25  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=12 ttl=63 time=1.46 ms
    13:08:25  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=13 ttl=63 time=1.17 ms
    13:08:25  INFO Object: APP_EVENT STDOUT from app app_test - msg: 64 bytes from atp-webproxy1.it.nicta.com.au (221.199.217.18): icmp_seq=14 ttl=63 time=2.15 ms


## Application Proxy - References

In addition to the binary\_path, parameters, state properties which we configured in the previous simple example, the Application proxy as more properties which you can set/query, and which are described below.

### General Properties

- binary\_path (String) the path to the binary of this app
- pkg\_tarball (String) the URI of the installation tarball of this app
- pkg\_ubuntu (String) the name of the Ubuntu package for this app
- pkg\_fedora (String) the name of the Fedora package for this app
- installed (Boolean) is this application installed? (default = false)
- force\_tarball\_install (Boolean) if true then force the installation from tarball even if other distribution-specific installation are available (default = false)
- map\_err\_to\_out (Boolean) if true then map StdErr to StdOut for this app (default = false)
- platform (Symbol) the OS platform where this app is running, the proxy currently auto-detect the ubuntu and fedora OS (:ubuntu, :fedora, :unknown)


### State Property

__This section needs to be updated. For latest documentation, please refer to http://mytestbed.net/doc/omf/OmfRc/ResourceProxy/Application.html#configure_state-instance_method__

- state (String) the state of this Application Proxy (stop, run, pause, install)

About the proxy's state:

- when the proxy is first launched, its default state is 'stop'
- from the 'stop' state, it can go to either the 'run' or 'install' states
- from the 'run' state it can go to either the 'stop' or 'pause' states
- from the 'pause' state it can go to either the 'stop' or 'run' states
- from the 'install' state it can go to only the 'stop' state

When entering the 'run' state, the proxy will launch the defined application with the environments and parameters which are described further down. The application will run until it finishes on its own will, or until the proxy enters the 'stop' state.

When entering the 'stop' state, and if the application is running, the proxy will attempt to cleanly shut down the application. First, it will write the string 'EXIT' to the application's standard-input. If the application is still running 4s after this, the proxy will send the SIGTERM signal to it. Finally, if the application is still running 4s later, the proxy will send the SIGKILL signal to it.

When entering the 'pause' state, the proxy will do nothing. It is up to other specific proxy to implement some tasks to perform there.

When entering the 'install' state, and if the property 'installed' is false, the proxy will attempt to install the application using the following steps. Once these steps are completed, the proxy will enter the 'stop' state.

- first if the force\_tarball\_install and pkg\_tarball properties are set, the proxy will download the tarball at the given URI and extract it at the root directory '/'
- otherwise the proxy will try to detect which OS platform it is running on
- if it detects an ubuntu OS and if pkg\_ubuntu is set, it will use 'apt-get' to attempt the package installation
- if it detects a fedora OS and if pkg\_fedora is set, it will use 'yum' to attempt the package installation
- if it cannot detect the OS and if pkg\_tarball is set, it will download the tarball and extract it at the root directory '/'

### Parameter Properties

- parameters (Hash) the command line parameters available for this app.

This hash is of the form: { :param1 => attribut1, ... } with param1 being the id of this parameter for this Proxy and with attribut1 being another Hash with the following possible keys and values (all are optional):

- :cmd (String) the command line for this parameter
- :order (Fixnum) the appearance order on the command line, default FIFO
- :dynamic (Boolean) parameter can be dynammically changed, default false
- :type (Numeric|String|Boolean) this parameter's type
- :default value given by default to this parameter
- :value value to set for this parameter
- :mandatory (Boolean) this parameter is mandatory, default false

Two examples of valid parameters definition are:

    { :host => {:default => 'localhost', :type => 'String',
             :mandatory => true, :order => 2},
      :port => {:default => 5000, :type => 'Numeric', :cmd => '-p',
             :mandatory => true, :order => 1},
      :size => {:default => 512, :type => 'Numeric', :cmd => '--pkt-size',
             :mandatory => true, :dynamic => true}
      :title => {:type => 'String', :mandatory => false}
    }

and

    { :title => {:value => "My First Application"} }


### Environment Properties

- environment (Hash) the environment variables to set prior to starting this app

The following Hash:

    { :foo => "Hello", :bar_bar => 123 }

will result in following environment variables being set before the application is started:

    FOO="Hello"
    BAR_BAR=123

### OML Properties

The OML properties are based on the [libOML man page](http://omf.mytestbed.net/doc/oml/latest/liboml2.html) and its [configuration file man page](http://omf.mytestbed.net/doc/oml/latest/liboml2.conf.html)

- oml\_loglevel (Integer) set a specific OML log level (default unset)
- oml\_logfile (String) set a specific path for OML log file (default unset)
- oml\_configfile (String) path of the OML XML config file (optional)
- oml (Hash) OML specific properties (optional), this Hash contains the
    following keys:
      - :available_mps (Hash) list of available OML Measurement Points
      - :collection (Hash) list of required OML Measurement Stream to collect
          when this application is running, as defined at
          http://omf.mytestbed.net/doc/oml/html/liboml2.conf.html
      - :experiment (String) name of the experiment in which this application
          is running
      - :id (String) OML id to use for this application when it is running

Note that if both oml/_configfile and oml.collection properties are set, the application will use the OML config file given by the oml/_configfile property and will discard the configuration information contained in oml.collection, oml.experiment, and oml.id

Here is an example of valid configuration for the oml property:

    one_message = comm.configure_message([oml: {
      :available_mps => [
        { :mp => 'radiotap',
          :fields => [
            {:field => 'sig_strength_dBm', :unit => 'dBm', :type => 'Fixnum'},
            {:field => 'noise_strength_dBm', :unit => 'dBm', :type => 'Fixnum'},
            {:field => 'power', :unit => 'mW', :type => 'Fixnum'}
          ]
        },
        { :mp => 'udp',
          :fields => [
            {:field => 'pkt_len', :unit => 'Byte', :type => 'Fixnum'},
            {:field => 'source', :type => 'String'},
            {:field => 'target', :type => 'String'}
          ]
        },
        { :mp => 'tcp',
          :fields => [
            {:field => 'throughput', :unit => 'Byte/sec', :type => 'Fixnum'},
            {:field => 'rtt', :unit => 'ms', :type => 'Fixnum'},
            {:field => 'source', :type => 'String'},
            {:field => 'target', :type => 'String'}        ]
        },
      ]
    }])

    another_message = comm.configure_message([oml: {
      :experiment => 'my_foo_experiment',
      :id => 'my_bar_application',
      :collection => [
        { :url => 'tcp://10.0.0.200:3003',
          :streams => [
            { :mp => 'radiotap',
              :interval => 2,
              :filters => [
                {:field => 'sig_strength_dBm', :operation => 'avg'},
                {:field => 'noise_strength_dBm', :operation => 'avg'},
                {:field => 'power', :operation => 'avg', :rename => 'energy'}
              ]
            },
            { :mp => 'udp',
              :samples => 10,
              :filters => [{:field => 'pkt_len', :operation => 'stddev'}]
            }
          ]
        },
        { :url => 'tcp://srv.mytestbed.net:3003',
          :streams => [
            { :mp => 'tcp',
              :interval => 5,
              :filters => [{:field => 'throughput', :operation => 'avg'}]
            }
          ]
        }
      ]
    }])
