# OMF 6 Installation Guide

![OMF components](images/install_diagram.png)

## Introduction

In an OMF testbed, everything is a resource. The entity that controls one or multiple resources is called **Resource Controller (RC)**. The RC can run directly on the resource (e.g. a PC), or run on a separate computer that can control the resources (e.g. a bunch of sensor nodes or an OpenFlow switch). OMF is designed to support many different types of resources, and additional RCs for those resources can make use of our OMF APIs.

All communication in OMF is done via **Publish/Subscribe (PubSub)**. By default OMF uses XMPP for that. Each OMF component must be able to talk to at least one XMPP server, although there can be multiple XMPP servers used in an experiment.

The experimenter uses the **Experiment Controller (EC)** to run the experiment script and steer the resources. The EC can be installed on a user-facing machine inside the testbed, or alternatively on the user's own computer.

## Roles

This installation guide caters for three types of audiences: **USERS**, **OPERATORS** and **DEVELOPERS**. Before you start, you need to identify your own role:

* **USERS** want to run experiments in an existing OMF 6 testbed, without having to set up the testbed and its resources themselves.
* **OPERATORS** maintain a testbed and want to make its resources available to OMF 6 users.
* **DEVELOPERS** want to modify or extend OMF 6 functionality, e.g. by adding a new resource proxy to the code. Testing happens on a local machine or in a OMF 6 testbed.

Each of the following sections has specific instructions for each audience class.

## Dependencies

OMF requires Ruby 1.9. If your operating system provides a Ruby 1.9 package, you can install and use that. However we recommend using [RVM](https://rvm.io) instead. RVM is useful if your OS does not provide a binary ruby1.9 package, or if you do not have root permissions, or if you want multiple Ruby installations with isolated gemsets.

The [official RVM site](https://rvm.io) provides an extensive installation guide, but here are some short instructions. The first step is to satisfy RVM and OMF build dependencies.

### **USERS, OPERATORS & DEVELOPERS**

Here are some examples for different operating systems:

#### Ubuntu

Type following in your console:

    sudo apt-get install build-essential libxml2-dev libxslt-dev

#### Debian

Type following in your console as root:

    apt-get install curl build-essential libxml2-dev libxslt-dev

#### Fedora

Type following in your console:

    sudo yum install -y tar libxml2 libxml2-devel libxslt libxslt-devel

#### Mac OS X

RVM will use the 'homebrew' package manager to install its dependencies. If you want to use a different package manager on OSX, please read the [RVM autolib instructions](https://rvm.io/rvm/autolibs).

#### Other OS

Please see the [RVM installation guide](https://rvm.io/rvm/install/). After installing RVM, you need to satisfy the dependencies of the gems that OMF uses. Currently, those are the development packages of **libxml2** and **libxslt**.

### **Verify this step**

If you are missing some dependencies, RVM and/or OMF installation will fail with a compilation error. Come back to this section and double check that you have all dependencies installed. Also refer to the [RVM user guide](https://rvm.io).

## RVM installation

### **USERS & DEVELOPERS**

You most likely want to install RVM with local user permissions (no root access required). Run:

    curl -L https://get.rvm.io | bash -s stable
    source $HOME/.rvm/scripts/rvm

### **OPERATORS**

If you want to install the OMF Resource Controller on a PC, you would typically have it run as a daemon on system boot. To allow the user to reconfigure the PC node (e.g. changing the network configuration), the OMF RC must be run as root. Run the same command as above, but become root first. Then run:

	source /etc/profile.d/rvm.sh

### **Verify this step**

	rvm -v

should show the RVM version string, e.g.:

	rvm 1.18.14 (stable) by Wayne E. Seguin <wayneeseguin@gmail.com>, Michal Papis <mpapis@gmail.com> [https://rvm.io/]

## Ruby installation

**Note:** In this guide we mention a specific Ruby version and patchlevel. We have had problems with other Ruby versions and patchlevels before, so we only officially support this specific one. If you choose to use a different patchlevel, you may run into problems with OMF.

### **USERS & DEVELOPERS**

Install Ruby, create a gemset, set Ruby version and gemset as defaults:

    rvm install ruby-1.9.3-p286 --autolibs=4
    rvm use ruby-1.9.3-p286
    rvm gemset create omf
    rvm use ruby-1.9.3-p286@omf --default

### **OPERATORS**

Again, run the same command as above as root if your OMF RC requires root permissions. Otherwise, do everything as a regular user.

### **Verify this step**

	rvm current; ruby -v

should show the currently used Ruby installation and the current gemset as well as the Ruby version string, e.g.

	ruby-1.9.3-p286@omf
	ruby 1.9.3p286 (2012-10-12 revision 37165)

## OMF Installation for USERS

After you've successfully installed RVM, Ruby 1.9 and the development packages of **libxml2** and **libxslt**, you are finally ready to install OMF.

### Installing the Experiment Controller

    gem install omf_ec --no-ri --no-rdoc

### Configuring the Experiment Controller

    omf_ec initconfig

will create a configuration file template in `~/.config/omf_ec.yml`. It's not mandatory to create this file, because all parameters for the EC can be specified on the command line. However if you prefer using a confguration file, you can store options like the communication URI and the OML URI here to avoid entering them on every EC run:

    ---
    :u: xmpp://<xmpp_hostname>
    :root_cert:
    :cert:
    :key:
    :log_file_dir: /tmp
    :version: false
    :d: false
    :x: false
    :help: false
    :debug: false
    :xmpp: false
    commands:
      :_doc: {}
      :exec:
        :oml_uri: 'tcp:<oml_server_hostname>:<oml_server_port>'
      :load: {}
      :save: {}
      :stat: {}
      :tell: {}

The file format is YAML, please remember to follow the correct [YAML syntax](http://www.yaml.org/). The `:commands:` section can be used to pass parameters only to specific OMF subcommands, such as exec, load or save. The format for the communication URI is *xmpp://\<username\>:\<password\>@\<xmpp_hostname\>*. If the username and password are omitted, OMF will choose a random combination and register a new XMPP account.

### Gaining access to an OMF testbed

Contact an OMF testbed operator for an account. Make a resource reservation if required and gather the HRNs of the resources you'd like to use. Also find out what the testbed's XMPP server hostname is.

### **Verify this step**

To verify that you can run experiments on the testbed, we are providing an experiment script ({file:doc/oedl\_simple\_test.rb also available here}). Run:

	curl -O https://raw.github.com/mytestbed/omf/master/doc/oedl_simple_test.rb
	omf_ec -u xmpp://<xmpp_hostname> exec oedl_simple_test.rb -- --res1 <hrn>

Replace \<xmpp_hostname\> with the hostname of the testbed's XMPP server. Replace \<hrn\> with the ID of a PC-style resource controller in the testbed (this is usually the testbed node's hostname). No XMPP user name/password is specified in this example, therefore OMF will use as default *hostname-pid* for both. If everything goes well, you should see an output like:

	18:36:59 INFO  XMPP::Communicator: Connecting to '<xmpp_hostname>' ...
	18:36:59 INFO  Object: Connected
	18:36:59 INFO  Object: Start experiment: 2013-03-07T07:36:59Z
	18:36:59 INFO  OmfEc: res1 = "test" (String)
	18:36:59 INFO  OmfEc: Subscribed to 249bf4cd-f799-4fe3-aee6-72f92af002db
	18:36:59 INFO  OmfEc: Subscribed to test
	18:36:59 INFO  OmfEc: Config test to join Actor
	18:37:00 INFO  OmfEc: Newly discovered resource >> test
	18:37:00 INFO  OmfEc: Event triggered: 'ALL_UP'
	18:37:03 INFO  Object: TEST - allGroups
	18:37:03 INFO  OmfEc: Subscribed to 249bf4cd-f799-4fe3-aee6-72f92af002db_application
	18:37:03 INFO  OmfEc: Resource xmpp://ccce4bf3-c8f7-4984-8e8e-1ade28d132a6@norbit.npc.nicta.com.au created
	18:37:03 INFO  OmfEc: Newly discovered resource >> ccce4bf3-c8f7-4984-8e8e-1ade28d132a6
	18:37:03 INFO  OmfEc: Event triggered: 'Actor_application_/bin/date_created_ba8b4fad-8d47-4782-b12b-9c93dd215bf2'
	18:37:03 INFO  OmfEc: APP_EVENT STARTED from app /bin/date - msg: env -i /bin/date 
	18:37:03 INFO  OmfEc: APP_EVENT STDOUT from app /bin/date - msg: Thu Mar  7 18:37:03 EST 2013
	18:37:03 INFO  OmfEc: APP_EVENT DONE.OK from app /bin/date - msg: status: pid 35135 exit 0
	18:37:06 INFO  Object: TEST - group
	18:37:06 INFO  OmfEc: Subscribed to 249bf4cd-f799-4fe3-aee6-72f92af002db_application
	18:37:06 INFO  OmfEc: Newly discovered resource >> d3416b01-51d9-48d4-b6b5-442454e8e7fa
	18:37:06 INFO  OmfEc: Resource xmpp://d3416b01-51d9-48d4-b6b5-442454e8e7fa@norbit.npc.nicta.com.au created
	18:37:06 INFO  OmfEc: Event triggered: 'Actor_application_/bin/hostname -f_created_50da62ba-c8b5-49b1-8182-7632d68f312a'
	18:37:06 INFO  OmfEc: APP_EVENT STARTED from app /bin/hostname -f - msg: env -i /bin/hostname -f 
	18:37:06 INFO  OmfEc: APP_EVENT STDOUT from app /bin/hostname -f - msg: y68.dynhost.nicta.com.au
	18:37:06 INFO  OmfEc: APP_EVENT DONE.OK from app /bin/hostname -f - msg: status: pid 35136 exit 0
	18:37:09 INFO  OmfEc: Exit in up to 15 seconds...
	18:37:19 INFO  OmfEc: Release applications and network interfaces
	18:37:19 INFO  OmfEc: Subscribed to ccce4bf3-c8f7-4984-8e8e-1ade28d132a6
	18:37:19 INFO  OmfEc: Subscribed to 249bf4cd-f799-4fe3-aee6-72f92af002db
	18:37:19 INFO  OmfEc: Subscribed to d3416b01-51d9-48d4-b6b5-442454e8e7fa
	18:37:19 INFO  OmfEc: Subscribed to 249bf4cd-f799-4fe3-aee6-72f92af002db
	18:37:24 INFO  XMPP::Communicator: Disconnecting ...

Congratulations, you've just run your first OMF experiment!

(link to tutorials and OEDL reference goes here)

## OMF Installation for OPERATORS

After you've successfully installed RVM, Ruby 1.9 and the development packages of **libxml2** and **libxslt**, you are finally ready to install OMF. For the resources you want to make available to OMF experimenters, you need to run one or multiple OMF Resource Controllers (RC). The RC that ships with the omf_rc gem is the classic RC for PC-style hardware. It allows the experimenter to configure the network devices on the node and run applications. It typically runs on the node itself.

### Installing the PC-type RC

On a typical PC node, you can install the RC as root:

    gem install omf_rc --no-ri --no-rdoc

Now it's time to install an XMPP server. Follow the instructions in [Appendix A: Openfire Installation](#Appendix_A__Openfire_Installation). Jump back here after you verified that Openfire is installed correctly.

If you'd like to start the Resource Controller upon booting your node, please ensure you have a system-wide RVM installation and run as root:

    install_omf_rc -i -c

This installs an init script for your distribution (currently supports Debian, Ubuntu and Fedora) and installs a default RC configuration file at `/etc/omf_rc/config.yml`. You should edit this file and set the correct values for your testbed before you can run the RC successfully. Here's an example configuration file:

    ---
    :uid: <%= Socket.gethostname %>
    :uri: xmpp://<%= "#{Socket.gethostname}-#{Process.pid}" %>:<%= "#{Socket.gethostname}-#{Process.pid}" %>@<xmpp_hostname>
    :environment: development
    :debug: false

The file format is YAML, please remember to follow the correct [YAML syntax](http://www.yaml.org/).

The format for the communication URI is *xmpp://\<username\>:\<password\>@\<xmpp_hostname\>*. If the username and password are omitted, OMF will choose a random combination and register a new XMPP account. Ruby's ERB syntax is used here to set the *UID* (topic name) and *XMPP user name and password* to the output of the Ruby command *Socket.gethostname*. We assume that the host name of each node is unique (e.g. assigned via DHCP), so we can use the same configuration file for all of them. For the XMPP credentials, the process ID is added to ensure that no two OMF entities on the same machine use the same XMPP account. OMF automatically creates the XMPP account if it doesn't exist yet. Don't forget to replace *\<xmpp_hostname\>* with your XMPP server's hostname.

### Installing other RCs

If you want to make other resources available to OMF users ([such as OpenFlow switches](https://github.com/kohoumas/omf_rc_openflow), OpenStack instances etc.) please follow their respective installation guides.

### **Verify this step**

If you want to start the RC using an init script and you installed this script with the '-i' flag above, you can start the daemon like this:

Ubuntu:

    start omf_rc

Debian & Fedora:

    /etc/init.d/omf_rc start

Check for the RC process by running:

    ps aux | grep omf_rc

If there is no "omf_rc" process, check the syslog for any errors that the startup script may have thrown.

To verify that your RC is responding correctly, we are providing a test script ({file:doc/rc\_alive\_check.rb also available here}). If you are already running the RC as a daemon in the background, you can use that RC instead of starting a new one. Otherwise run:

    omf_rc -u xmpp://<xmpp_hostname> -i test

No XMPP user name/password is specified in this example, therefore OMF will use as default *hostname-pid* for both. For any other RC you might use, make sure it listens on the "test" topic on your XMPP server. Replace \<xmpp_hostname\> with the hostname of your Openfire server. 

Now open a new terminal and run:

    curl -O https://raw.github.com/mytestbed/omf/master/doc/rc_alive_check.rb
    ruby rc_alive_check.rb xmpp://<xmpp_hostname> test

using the same XMPP URI. Watch the output for any lines starting with ERROR. If the RC could be contacted successfully at the "test" topic, your resource is ready to run experiments. If you use the daemonized RC, your default topic name would be your local hostname instead of "test", unless you changed the :uid: parameter in the RC config file to something else.

### Monitoring

(TODO: write section on monitoring OMF testbeds with Jenkins)

## OMF Installation for DEVELOPERS

After you've successfully installed RVM, Ruby 1.9 and the development packages of **libxml2** and **libxslt**, you are finally ready to install OMF. 

### Installing all gems from source

We encourage developers to use the very latest OMF code from the master branch of our git repository. Ensure you have git installed and run

    git clone git://git.mytestbed.net/omf.git
    cd omf

Some components are linked in OMF main repository as git submodules, if you want to use them, simply issue these commands inside the newly cloned repository:

    git submodule init
    git submodule update

In order to install the gem dependencies, then build, install and test the OMF gems, run:

    rake

### **Verify this step**

If the rake task finishes without any errors, you've successfully installed OMF from source code. Head to the {file:doc/DEVELOPERS.mkd Developer Guide} to learn how to modify OMF to suit your needs.

Before you can run OMF, please follow the instructions in [Appendix A: Openfire Installation](#Appendix_A__Openfire_Installation) below.

## Appendix A: Openfire Installation

### **USERS**

Your testbed operator should provide the XMPP server. You can skip this step.

### **OPERATORS & DEVELOPERS**

**OPERATORS** need to install an XMPP server in their testbed. It should be reachable from the outside Internet if any of the testbed users are on the outside of your organisation or if you want to federate your testbed with another organisation over the public Internet. **DEVELOPERS** should run an XMPP server on their local machine for development.

For OMF, we recommend using Openfire. Other XMPP servers may work as well, but this has not been extensively tested. Ejabberd is known to have some issues regarding node permissions and database cleanup. If are upgrading from an older Openfire release and you have trouble running OMF, please wipe your Openfire database and recreate the pubsub nodes.

* uninstall any other XMPP servers first
* make sure ports TCP 5222, 5269 and 9090 are open in your firewall
* Openfire 3.8.1 requires Java, but has some issues with OpenJDK. Instead we recommend to install Oracle Java 7. Ubuntu users can follow [this guide](http://www.webupd8.org/2012/01/install-oracle-java-jdk-7-in-ubuntu-via.html).
* after installing Java, on Ubuntu 12.04 or higher, run the following commands as root:

        wget http://www.igniterealtime.org/downloadServlet?filename=openfire/openfire_3.8.1_all.deb
        dpkg -i downloadServlet\?filename\=openfire%2Fopenfire_3.8.1_all.deb

* on any other OS, [download Openfire](http://www.igniterealtime.org/projects/openfire/) and install it alongside the Oracle Java JRE
* check if openfire is running: `ps aux | grep openfire` . Startup can take a while, please be patient.
* if openfire failed to start, you may need to edit `/etc/init.d/openfire` and set the correct JAVA_HOME for your Java installation, e.g.:

        JAVA_HOME=/usr/lib/jvm/java-7-oracle

* direct your web browser to [http://localhost:9090](http://localhost:9090) and begin the setup wizard
* choose your language and click continue
* enter the XMPP server's hostname (e.g. xmpp.domain.com or localhost) in the Domain field and click continue
* choose the embedded database. You can also use other database types, but you will need to install the database server first and manually create a user and a database for Openfire.
* when using mySQL, you need to change the length of the Pubsub node names in the mySQL database. Basically you need to run the commands:
<pre>mysql -u openfire -p
use openfire;
alter table ofPubsubNode modify name VARCHAR(100);
quit;
</pre>
* choose the default profile and click continue
* enter an admin password and click continue, then wait until the installation is finished
* log on to the web GUI at [http://localhost:9090](http://localhost:9090) with the user/password you chose in the wizard
* click 'Server', 'Server Settings', 'Registration & Login', enable 'Inband Account Registration' and disable 'Anonymous Login'
* To avoid duplicate subscriptions to the same topic in order to reduce the volume of messages, we recommend turning the multiple subscriptions feature off. Inside Openfire system properties panel, add *Property Name:* **xmpp.pubsub.multiple-subscriptions** *Property Value:* **false**
* for server2server connectivity (used for testbed federation), you need to set up a DNS name "pubsub.yourhost.name" which can be resolved by public DNS servers. It can be an A record pointing to the same IP address as your host, or a CNAME pointing to the hostname. There is no need for a DNS SRV record. Learn more about S2S [here](http://omf.mytestbed.net/projects/omf/wiki/Openfire_s2s).
* if your testbed consists of several hundred nodes, you may consider increasing the maximum open file descriptor limit for the "openfire" user. This can be done by editing `/etc/security/limits.conf` and adding the lines `root	soft nofile	100000` and `root hard nofile 100000`, which allows a maximum of 100K open sockets/files per process. The default in Ubuntu is 1024. If this is not increased you may run into a problem where openfire does not accept any more incoming TCP connections.

### **Verify this step**

To verify that Openfire has been set up correctly, we are providing a test script ({file:doc/openfire_test.rb also available here}). Run:

	curl -O https://raw.github.com/mytestbed/omf/master/doc/openfire_test.rb
	ruby openfire_test.rb <xmpp_hostname>

Watch the output for any lines starting with ERROR. Double check your Openfire settings as described above and re-run the test until you receive no more ERRORs.
